{
  "_from": "json-response",
  "_id": "json-response@0.0.2",
  "_inBundle": false,
  "_integrity": "sha1-5rxwdUnF+tYnf8AVw5RelfeZmL8=",
  "_location": "/json-response",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "json-response",
    "fetchSpec": "latest",
    "name": "json-response",
    "raw": "json-response",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/json-response/-/json-response-0.0.2.tgz",
  "_shasum": "e6bc707549c5fad6277fc015c3945e95f79998bf",
  "_spec": "json-response",
  "_where": "/home/ifmg/CPPG",
  "author": {
    "email": "erickrdch@icloud.com",
    "name": "Erick Ruiz de Chavez",
    "url": "http://erickrdch.com"
  },
  "bugs": {
    "url": "https://github.com/erickrdch/json-response/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": "No longer maintained. Interested? Send me an email: erick@erch.co",
  "description": "API-ish JSON response for express using basic fields (status, data, message). DRY.",
  "devDependencies": {},
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/erickrdch/json-response",
  "keywords": [
    "express",
    "json",
    "response"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/erickrdch/json-response/blob/master/LICENSE"
    }
  ],
  "main": "json-response.js",
  "name": "json-response",
  "optionalDependencies": {},
  "readme": "json-response\n=============\n\nAPI-ish JSON response for express using basic fields (status, data, message). DRY.\n\nThe response HTTP status code will ALWAYS be 200; The status on the JSON object will be the corresponding status code.\n\nThe JSON response looks like this:\n\n```json\n{\n    \"status\": 200,\n    \"data\": {\n        \"foo\": \"bar\"\n    },\n    \"message\": \"hello world\"\n}\n```\n\n## Installation\n\n```sh\nnpm install --save json-response\n```\n\n## Usage\n\nThis module should only be required once, as soon as possible to the start of your application. It will extend Node's `http.ServerResponse.prototype` with HTTP status functions by code and name (see below).\n\n```js\nvar express = require('express');\nvar app = express();\n\nrequire('json-response');\n\napp.get('/', function(req, res){\n  res.ok({foo: 'bar'}, 'hello world');\n});\n\napp.listen(3000);\n```\n\nIf you prefer to send your own responses (most likely using `res.send` or `res.json`) you can always use `res.response` to create a consistent response object.\n\n```js\nvar express = require('express');\nvar app = express();\n\nrequire('json-response');\n\napp.get('/', function(req, res){\n  res.send(res.response(200, {foo: 'bar'}, 'hello world'));\n});\n\napp.listen(3000);\n```\n\n### Available Methods\n\n#### res.response(status, data, message);\n\nReturns an object to be sent later to the client using res.send or similar.\n\n```js\nres.response(200, {foo:'bar'}, 'hello world');\n```\n\n---\n\n**Note:** All the bellow methods can be used by either name or code; all of them call automatically `res.send`. If you need to add custom headers or any other response you can do so as usual before calling them.\n\n---\n\n#### res.ok(data, message)\n\n```js\nres.oK({foo:'bar'}, 'message');\n\n// or\n\nres[200](data, message)\n```\n\n---\n\n#### res.created(data, message)\n\n```js\nres.created({foo:'bar'}, 'message');\n\n// or\n\nres[201](data, message)\n```\n\n---\n\n#### res.accepted(data, message)\n\n```js\nres.accepted({foo:'bar'}, 'message');\n\n// or\n\nres[202](data, message)\n```\n\n---\n\n#### res.nonAuthoritativeInformation(data, message)\n\n```js\nres.nonAuthoritativeInformation({foo:'bar'}, 'message');\n\n// or\n\nres[203](data, message)\n```\n\n---\n\n#### res.noContent(data, message)\n\n```js\nres.noContent({foo:'bar'}, 'message');\n\n// or\n\nres[204](data, message)\n```\n\n---\n\n#### res.resetContent(data, message)\n\n```js\nres.resetContent({foo:'bar'}, 'message');\n\n// or\n\nres[205](data, message)\n```\n\n---\n\n#### res.partialContent(data, message)\n\n```js\nres.partialContent({foo:'bar'}, 'message');\n\n// or\n\nres[206](data, message)\n```\n\n---\n\n#### res.badRequest(data, message)\n\n```js\nres.badRequest({foo:'bar'}, 'message');\n\n// or\n\nres[400](data, message)\n```\n\n---\n\n#### res.unauthorized(data, message)\n\n```js\nres.unauthorized({foo:'bar'}, 'message');\n\n// or\n\nres[401](data, message)\n```\n\n---\n\n#### res.paymentRequired(data, message)\n\n```js\nres.paymentRequired({foo:'bar'}, 'message');\n\n// or\n\nres[402](data, message)\n```\n\n---\n\n#### res.forbidden(data, message)\n\n```js\nres.forbidden({foo:'bar'}, 'message');\n\n// or\n\nres[403](data, message)\n```\n\n---\n\n#### res.notFound(data, message)\n\n```js\nres.notFound({foo:'bar'}, 'message');\n\n// or\n\nres[404](data, message)\n```\n\n---\n\n#### res.methodNotAllowed(data, message)\n\n```js\nres.methodNotAllowed({foo:'bar'}, 'message');\n\n// or\n\nres[405](data, message)\n```\n\n---\n\n#### res.notAcceptable(data, message)\n\n```js\nres.notAcceptable({foo:'bar'}, 'message');\n\n// or\n\nres[406](data, message)\n```\n\n---\n\n#### res.proxyAuthenticationRequired(data, message)\n\n```js\nres.proxyAuthenticationRequired({foo:'bar'}, 'message');\n\n// or\n\nres[407](data, message)\n```\n\n---\n\n#### res.requestTimeout(data, message)\n\n```js\nres.requestTimeout({foo:'bar'}, 'message');\n\n// or\n\nres[408](data, message)\n```\n\n---\n\n#### res.conflict(data, message)\n\n```js\nres.conflict({foo:'bar'}, 'message');\n\n// or\n\nres[409](data, message)\n```\n\n---\n\n#### res.gone(data, message)\n\n```js\nres.gone({foo:'bar'}, 'message');\n\n// or\n\nres[410](data, message)\n```\n\n---\n\n#### res.lengthRequired(data, message)\n\n```js\nres.lengthRequired({foo:'bar'}, 'message');\n\n// or\n\nres[411](data, message)\n```\n\n---\n\n#### res.preconditionFailed(data, message)\n\n```js\nres.preconditionFailed({foo:'bar'}, 'message');\n\n// or\n\nres[412](data, message)\n```\n\n---\n\n#### res.requestEntityTooLarge(data, message)\n\n```js\nres.requestEntityTooLarge({foo:'bar'}, 'message');\n\n// or\n\nres[413](data, message)\n```\n\n---\n\n#### res.requestURITooLong(data, message)\n\n```js\nres.requestURITooLong({foo:'bar'}, 'message');\n\n// or\n\nres[414](data, message)\n```\n\n---\n\n#### res.unsupportedMediaType(data, message)\n\n```js\nres.unsupportedMediaType({foo:'bar'}, 'message');\n\n// or\n\nres[415](data, message)\n```\n\n---\n\n#### res.requestedRangeNotSatisfiable(data, message)\n\n```js\nres.requestedRangeNotSatisfiable({foo:'bar'}, 'message');\n\n// or\n\nres[416](data, message)\n```\n\n---\n\n#### res.expectationFailed(data, message)\n\n```js\nres.expectationFailed({foo:'bar'}, 'message');\n\n// or\n\nres[417](data, message)\n```\n\n---\n\n#### res.internalServerError(data, message)\n\n```js\nres.internalServerError({foo:'bar'}, 'message');\n\n// or\n\nres[500](data, message)\n```\n\n---\n\n#### res.notImplemented(data, message)\n\n```js\nres.notImplemented({foo:'bar'}, 'message');\n\n// or\n\nres[501](data, message)\n```\n\n---\n\n#### res.badGateway(data, message)\n\n```js\nres.badGateway({foo:'bar'}, 'message');\n\n// or\n\nres[502](data, message)\n```\n\n---\n\n#### res.serviceUnavailable(data, message)\n\n```js\nres.serviceUnavailable({foo:'bar'}, 'message');\n\n// or\n\nres[503](data, message)\n```\n\n---\n\n#### res.gatewayTimeout(data, message)\n\n```js\nres.gatewayTimeout({foo:'bar'}, 'message');\n\n// or\n\nres[504](data, message)\n```\n\n---\n\n#### res.httpVersionNotSupported(data, message)\n\n```js\nres.httpVersionNotSupported({foo:'bar'}, 'message');\n\n// or\n\nres[505]({foo:'bar'}, 'message');\n```\n\n---\n\n## To Do\n\n- Add test cases\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/erickrdch/json-response.git"
  },
  "scripts": {
    "test": "node foo.js"
  },
  "version": "0.0.2"
}
